import React, { useState, useEffect } from 'react';
import { useLocation, useNavigate, useParams } from 'react-router-dom';
import Breadcrumb from '../../../components/Breadcrumbs/Breadcrumb';
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';
import CreatePartyDropdown from './CreatePartyDropdown';
import UplaodSignature from './UplaodSignature';
import { Trash2 } from 'lucide-react'; // Import delete icon

const EditInvoiceForm = () => {
  const API_URL = import.meta.env.VITE_API_URL;
  const navigate = useNavigate();
  const [salesInvoiceNo, setSalesInvoiceNo] = useState(1);
  const [invoiceDate, setInvoiceDate] = useState(
    new Date('2025-03-11T16:21:05Z'),
  ); // Default to today
  const [dueDate, setDueDate] = useState(new Date()); // Default to today
  const [showNotesInput, setShowNotesInput] = useState(false);
  const [notes, setNotes] = useState('');
  const [showDiscountInput, setShowDiscountInput] = useState(false);
  const [discount, setDiscount] = useState(''); // Store discount value
  const [paymentTerms, setPaymentTerms] = useState(30);
  const [items, setItems] = useState([]); // Store fetched items
  const [selectedItems, setSelectedItems] = useState<any[]>([]); // Store selected items
  const [showDropdown, setShowDropdown] = useState(false);
  const [quantities, setQuantities] = useState<{ [key: string]: number }>({});
  const [totalAmount, setTotalAmount] = useState(0);
  const [taxRates, setTaxRates] = useState([]); // Store tax rates
  const [amountReceived, setAmountReceived] = useState(0);
  const [isFullyPaid, setIsFullyPaid] = useState(false);
  const [taxableAmount, setTaxableAmount] = useState(0);
  const [isSaving, setIsSaving] = useState(false);
  const [selectedParty, setSelectedParty] = useState(null);
  const [signatureUrl, setSignatureUrl] = useState<string | null>(null);
  const [selectedPaymentMode, setSelectedPaymentMode] = useState('Cash');
  const { id } = useParams();
  const location = useLocation();

  const [invoiceData, setInvoiceData] = useState<{
    invoice_no: string;
    date: string;
    invoice_items: {
      uid: string;
      item_name: string;
      price_item: number;
      quantity: number;
      discount: number;
      amount: number;
      unit_price:number;
      salesPrice_with_tax?: number; // ✅ Mark as optional
      tax_rate:number,
      gstTaxRat:number
      
    }[];
    due_date: string;
    payment_term: string;
    total_amount: string;
    amount_received: string;
    balance_amount: string;
    party: any;
  }>({
    invoice_no: '',
    date: '',
    invoice_items: [],
    due_date: '',
    payment_term: '',
    total_amount: '',
    amount_received: '',
    balance_amount: '',
    party: null,
  });
  

  useEffect(() => {
    if (location.state?.invoiceData) {
      setInvoiceData(location.state.invoiceData);
      if (location.state.invoiceData.party) {
        fetchPartyDetails(location.state.invoiceData.party);
      }
    } else {
      fetchInvoiceDetails();
    }
  }, [id]);

  const fetchPartyDetails = async (partyId) => {
    try {
      const token = localStorage.getItem('accessToken');
      const response = await fetch(`${API_URL}/parties/parties/${partyId}/`, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      const partyData = await response.json();
      console.log(partyData);
      setSelectedParty(partyData);
    } catch (error) {
      console.error('Error fetching party details:', error);
    }
  };

  const fetchInvoiceDetails = async () => {
    try {
      const token = localStorage.getItem('accessToken');
      const response = await fetch(`${API_URL}/sales/invoices/${id}/`, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      const data = await response.json();
      setInvoiceData(data);
    } catch (error) {
      console.error('Error fetching invoice details:', error);
    }
  };

  const handleChange = (e) => {
    const { name, value } = e.target;

    setInvoiceData((prevData) => {
      const updatedData = { ...prevData, [name]: value };

      // Agar payment_term update ho raha hai, toh due date bhi update karein
      if (name === 'payment_term') {
        const updatedDueDate = new Date(invoiceDate);
        updatedDueDate.setDate(updatedDueDate.getDate() + Number(value)); // Add new payment term days
        updatedData.due_date = updatedDueDate.toISOString().split('T')[0]; // Format date as YYYY-MM-DD
      }

      return updatedData;
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSaving(true); // Button ko disable karne ke liye

    try {
      const token = localStorage.getItem('accessToken');
      const response = await fetch(`${API_URL}/sales/invoices/${id}/`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(invoiceData), // Corrected data object
      });

      if (response.ok) {
        alert('Invoice updated successfully!');
        navigate(`/Sales/Sales-Invoice`);
      } else {
        alert('Failed to update invoice.');
      }
    } catch (error) {
      console.error('Error updating invoice:', error);
    } finally {
      setIsSaving(false); // Button ko re-enable karne ke liye
    }
  };

  const balanceAmount = isFullyPaid ? 0 : totalAmount - amountReceived;
  const resetTime = (date) => {
    const reset = new Date(date);
    reset.setHours(0, 0, 0, 0); // Set the time to midnight
    return reset;
  };

  // Custom format function to convert date to 'YYYY-MM-DD'
  const formatDate = (date) => {
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0'); // Add leading zero for months < 10
    const day = String(date.getDate()).padStart(2, '0'); // Add leading zero for days < 10
    return `${year}-${month}-${day}`;
  };

  useEffect(() => {
    let total = 0;
    let taxable = 0;
  
    invoiceData.invoice_items.forEach((item) => {
      total += item.amount;
      taxable += item.price * item.quantity;
    });
  
    setTotalAmount(total);
    setTaxableAmount(taxable);
  }, [invoiceData.invoice_items]);

  useEffect(() => {
    setDueDate((prevDueDate) => {
      const updatedDueDate = new Date(invoiceDate);
      updatedDueDate.setDate(updatedDueDate.getDate() + Number(paymentTerms));
      return updatedDueDate;
    });

    // Invoice Data mein bhi update karein
    setInvoiceData((prevData) => ({
      ...prevData,
      due_date: new Date(invoiceDate).toISOString().split('T')[0], // Update formatted due date
    }));
  }, [invoiceDate, paymentTerms]);

  const fetchTaxRates = async () => {
    try {
      const token = localStorage.getItem('accessToken');
      if (!token) throw new Error('Token not found');

      const response = await fetch(`${API_URL}/inventory/gst-tax-rates/`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
      });

      const data = await response.json();
      if (Array.isArray(data.results)) {
        setTaxRates(data.results);
      } else {
        throw new Error('Invalid tax data format');
      }
    } catch (error) {
      console.error('Error fetching tax rates:', error);
      setTaxRates([]); // Empty array on error
    }
  };

  useEffect(() => {
    fetchTaxRates();
  }, []);

  const fetchItems = async () => {
    try {
      const token = localStorage.getItem('accessToken');
      if (!token) throw new Error('Token not found');

      // Fetch items and services concurrently
      const [itemsResponse, servicesResponse] = await Promise.all([
        fetch(`${API_URL}/inventory/items/`, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${token}`,
          },
        }),
        fetch(`${API_URL}/inventory/service/`, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${token}`,
          },
        }),
      ]);

      // Convert responses to JSON
      const itemsData = await itemsResponse.json();
      const servicesData = await servicesResponse.json();

      // Combine fetched items and services
      const allItems = [
        ...itemsData.results.map((item: any) => ({ ...item, type: 'item' })),
        ...servicesData.results.map((service: any) => ({
          ...service,
          type: 'service',
        })),
      ];

      console.log('Fetched Items & Services:', allItems);

      // Store fetched data in state
      if (Array.isArray(allItems)) {
        setItems(allItems);
      } else {
        throw new Error('Invalid data format');
      }
    } catch (error) {
      console.error('Error fetching items:', error);
      setItems([]); // Set empty array on error
    }
  };

  const handleAddItemClick = () => {
    setShowDropdown(!showDropdown);
    if (!items.length) fetchItems(); // Fetch items only if not already fetched
  };

  const handleQuantityChange = (uid, newQuantity) => {
    
    setInvoiceData((prevData) => {
      const updatedItems = prevData.invoice_items.map((item) => {
        if (item.id === uid) {
          //console.log(item.id)

        console.log("Updating Quantity for UID:", uid);
        console.log("Old Amount:", item.unit_price);
        console.log("New Quantity:", newQuantity);
        const price =  item.salesPrice_with_tax??item.unit_price; 
       
        console.log(price)
          // ✅ Correct amount calculation
          const updatedAmount =
            newQuantity * price
            console.log(updatedAmount)
  
          return { ...item, quantity: newQuantity, amount: updatedAmount };
        }
        return item; // ✅ Baaki items unchanged rahenge
      });
  
      return { ...prevData, invoice_items: [...updatedItems] }; // ✅ Ensure new array reference
    });
  
    // ✅ Sync with selectedItems state if used
    setSelectedItems((prevItems) => {
      return prevItems.map((item) =>
        item.uid === uid
          ? {
              ...item,
              quantity: newQuantity,
              amount:
                newQuantity * item.salesPrice_with_tax -
                (newQuantity * item.salesPrice_with_tax * item.discount) / 100,
            }
          : item
      );
    });
  };
  
  

  const handleSelectItem = (item) => {
    setInvoiceData((prevData) => {
        const quantity = 1;
        const price = item.salesPrice_without_tax || item.salesPrice || 0;
        const discount = item.discount || 0;

        const selectedTax = taxRates.find((tax) => tax.id === item.gstTaxRate);
        const tax = parseFloat(selectedTax?.rate) || 0;
        const cess = parseFloat(selectedTax?.cess_rate) || 0;

        const taxAmount = (price * tax) / 100;
        const cessAmount = (price * cess) / 100;
        const sgst = taxAmount / 2;
        const cgst = taxAmount / 2;

        const selectedItem = {
            ...item,
            uid: `${item.id}-${Date.now()}-${Math.random()}`, // Unique ID
            item_name: item.itemName || item.serviceName || 'Unknown',
            price,
            quantity,
            discount,
            taxId: item.gstTaxRate,
            tax:item.tax_rate,
            cessRate: cess,
            taxAmount,
            sgst,
            cgst,
            cessAmount,
            amount: price + taxAmount + cessAmount,
        };

        // ✅ अब हर बार नया आइटम लिस्ट में ऐड होगा
        return { ...prevData, invoice_items: [...prevData.invoice_items, selectedItem] };
    });

    setShowDropdown(false); // Hide dropdown after selection
};

  /* const handleDiscountChange = (uid, discountValue) => {
      const discount = discountValue === '' ? 0 : parseFloat(discountValue); // Empty string means no discount
      
      
  
      setSelectedItems((prevItems) =>
        prevItems.map((item) =>
          item.uid === uid
            ? {
                ...item,
                discount,
                amount:
                  item.quantity * item.salesPrice_with_tax -
                  (item.quantity * item.salesPrice_with_tax * discount) / 100 , // Recalculate amount
                  
              }
            : item,
        ),
      );
      
    }; */

  const handleDeleteItem = (id) => {
    console.log('Deleting item with UID:', id); // Debugging
    setInvoiceData((prevData) => {
      const updatedItems = prevData.invoice_items.filter(
        (item) => item.id !== id,
      );
      console.log('Updated items after deletion:', updatedItems); // Debugging
      return { ...prevData, invoice_items: updatedItems };
    });
  };

  const handleTaxChange = (uid, newTaxRateID) => {
    const selectedTax = taxRates.find((tax) => tax.id === newTaxRateID);
    const cessRate = parseFloat(selectedTax?.cess_rate) || 0;
    const newTaxRate = parseFloat(selectedTax?.rate) || 0;
  
    setInvoiceData((prevData) => {
      const updatedItems = prevData.invoice_items.map((item) => 
        
        item.id === uid 
          ? {
            
              ...item,
              taxId: newTaxRateID,
              tax: newTaxRate,
              cessRate,
              taxAmount: (item.price_item * newTaxRate) / 100,
              sgst: (item.price_item * newTaxRate) / 200,
              cgst: (item.price_item * newTaxRate) / 200,
              cessAmount: (item.price_item * cessRate) / 100,
              amount:
                item.salesPriceType === 'Without Tax'
                  ? item.price * (1 + newTaxRate / 100 + cessRate / 100)
                  : item.price,
            }
          : { ...item } // 🛠️ New object create karna zaroori hai!
      );
  
      return { ...prevData, invoice_items: updatedItems };
    });
  };
  console.log(invoiceData)
  
  const groupedTaxes = invoiceData.invoice_items.reduce((acc, item) => {
    const totalAmount = item.price * item.quantity; // ✅ Total taxable amount

    if (!acc[item.tax]) {
      acc[item.tax] = {
        sgst: 0,
        cgst: 0,
        cessAmount: 0,
        cessRate: item.cessRate || 0, // ✅ Ensure cessRate is handled
      };
    }

    // ✅ Correct SGST & CGST calculation
    acc[item.tax].sgst += (totalAmount * item.tax) / 200;
    acc[item.tax].cgst += (totalAmount * item.tax) / 200;
    acc[item.tax].cessAmount += (totalAmount * acc[item.tax].cessRate) / 100; // ✅ Cess calculation

    return acc;
  }, {});

  const handleCheckboxChange = () => {
    if (!isFullyPaid) {
      setAmountReceived(totalAmount); // Set total amount
    } else {
      setAmountReceived(0); // Reset if unchecked
    }
    setIsFullyPaid(!isFullyPaid);
  };

  useEffect(() => {
    const savedInvoiceNo = localStorage.getItem('salesInvoiceNo');
    if (savedInvoiceNo) {
      setSalesInvoiceNo(parseInt(savedInvoiceNo) + 1); // Increment by 1
    }
  }, []);

  /* const handleSaveInvoice = async () => {
    if (!selectedParty) {
      alert('Please select a party before saving the invoice!');
      return;
    }

    setIsSaving(true); // Start loading

    // ✅ Extract only required fields from selectedItems
    const formattedItems = selectedItems.map((item) => ({
      item: item.id, // Item ID
      gstTaxRate: item.taxId, // Tax ID
      quantity: item.quantity, // Quantity
      /* sgst: item.sgst,        // ✅ SGST ko add kiya
      cgst: item.cgst,        // ✅ CGST ko add kiya
      cessAmount: item.cessAmount, 
    }));

    const invoiceData = {
      invoice_no: salesInvoiceNo,
      date: invoiceDate,
      payment_term: paymentTerms,
      // due_date:dueDate,
      invoice_items: formattedItems, // Array of items
      // taxableAmount,
      discount,
      // total_amount: totalAmount,
      amount_received: amountReceived,
      payment_method: selectedPaymentMode,
      is_fully_paid: isFullyPaid,
      // balance_amount: balanceAmount,
      notes,
      signature: signatureUrl, // Add signature URL here
      party: selectedParty.id,
      // termsConditions: [
      //   'Goods once sold will not be taken back or exchanged',
      //   'All disputes are subject to [ENTER_YOUR_CITY_NAME] jurisdiction only',
      // ],
    };

    try {
      const token = localStorage.getItem('accessToken');
      if (!token) throw new Error('Token not found');
      const response = await fetch(`${API_URL}/sales/invoices/`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(invoiceData),
      });

      if (response.ok) {
        const result = await response.json();
        alert('Invoice Saved Successfully!');
        console.log(result);
        const newInvoiceNo = salesInvoiceNo + 1;
        setSalesInvoiceNo(newInvoiceNo);
        localStorage.setItem('salesInvoiceNo', newInvoiceNo.toString());
      } else {
        alert('Failed to save invoice');
      }
    } catch (error) {
      console.error('Error saving invoice:', error);
      alert('Something went wrong!');
    } finally {
      setIsSaving(false); // Stop loading
    }
  };
 */
  const handleBack = () => {
    navigate(-1); // Navigates back to the previous page
  };

  return (
    <>
      <Breadcrumb pageName="Sales Invoices" />
      <div className="bg-gray-100 dark:bg-gray-900 p-4">
        <div className="max-w-7xl mx-auto bg-white dark:bg-gray-800 p-6 rounded-lg shadow-lg">
          <div className="flex flex-row-reverse justify-between items-start mb-12">
            <div className="flex flex-col items-end space-y-1">
              <label className="text-gray-700 font-bold ">Bill To</label>
              <div className="border-2 border-blue-400 w-48 h-16 flex items-center justify-center text-blue-400 cursor-pointer text-lg font-semibold rounded-lg">
                <CreatePartyDropdown
                  selectedParty={selectedParty}
                  setSelectedParty={setSelectedParty}
                />
              </div>
            </div>
            <div className="space-y-2">
              <div className="flex items-center space-x-2">
                <label className="block text-gray-700 font-bold">
                  Sales Invoice No:
                </label>
                <input
                  type="text"
                  value={invoiceData.invoice_no} // Bind state
                  readOnly // Prevent manual editing
                  className="border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-black dark:text-white p-2 rounded"
                />
              </div>
              <div className="flex items-center space-x-2">
                <label className="block text-gray-700 font-bold">
                  Sales Invoice Date:
                </label>
                <DatePicker
                  selected={invoiceData.date}
                  onChange={(date) => {
                    const resetDate = resetTime(date); // Optional: Reset time if needed
                    const formattedDate = formatDate(resetDate); // Format to 'YYYY-MM-DD'
                    setInvoiceDate(formattedDate); // Store the formatted date in state
                    console.log(formattedDate); // Log formatted date
                  }}
                  className="border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-black dark:text-white p-2 rounded"
                  dateFormat="yyyy-MM-dd" // Ensure proper date format for display
                />
              </div>
              <div className="flex items-center space-x-2">
                <label className="block text-gray-700 font-bold">
                  Payment Terms:
                </label>
                <input
                  type="text"
                  name="payment_term"
                  value={invoiceData.payment_term}
                  onChange={handleChange}
                  className="border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-black dark:text-white p-2 rounded w-16"
                />
                <span>days</span>
              </div>
              <div className="flex items-center space-x-2">
                <label className="block text-gray-700 font-bold">
                  Due Date:
                </label>
                <DatePicker
                  selected={invoiceData.due_date}
                  onChange={() => {}}
                  className="border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-black dark:text-white p-2 rounded"
                  dateFormat="dd MMM yyyy"
                  readOnly
                />
              </div>
            </div>
          </div>

          <div className="overflow-x-auto">
            <table className="min-w-full bg-white dark:bg-gray-700 dark:text-white">
              <thead>
                <tr className="w-full bg-gray-100 text-gray-700 dark:bg-gray-700 dark:text-white">
                  <th className="py-2 px-4 border">NO</th>
                  <th className="py-2 px-4 border">ITEMS/ SERVICES</th>
                  <th className="py-2 px-4 border">HSN/ SAC</th>
                  <th className="py-2 px-4 border">QTY</th>
                  <th className="py-2 px-4 border">PRICE/ITEM (₹)</th>

                  <th className="py-2 px-4 border">TAX</th>
                  <th className="py-2 px-4 border">AMOUNT (₹)</th>
                  <th className="py-2 px-4 border"></th>
                </tr>
              </thead>
              <tbody>
                {invoiceData?.invoice_items?.length > 0 ? (
                  invoiceData.invoice_items.map((item, index) => (
                    <tr key={index} className="border">
                      <td className="py-2 px-4 border">{index + 1}</td>
                      <td className="py-2 px-4 border">
                        {item.item_name || item.service_name}
                      </td>
                      <td className="py-2 px-4 border">
                        {item.hsnCode || item.sacCode}
                      </td>
                      <td className="py-2 px-4 border">
                        <input
                          type="number"
                          value={item.quantity === 0 ? '' : item.quantity} // Show empty instead of 0
                          min="1"
                          onChange={(e) =>
                            handleQuantityChange(
                              item.id,
                              Number(e.target.value),
                            )
                          }
                          className="w-16 p-1 border rounded text-center dark:bg-gray-700 dark:text-white"
                        />
                      </td>
                      <td className="py-2 px-4 border">
                        ₹{item.price_item || item.price.toFixed(2)}
                      </td>
                      {/* <td className="py-2 px-4 border">
                        <input
                          type="number"
                          value={item.discount || ''}
                          onChange={(e) =>
                            handleDiscountChange(item.uid, e.target.value)
                          } // USE UID
                          className="w-20 p-1 border rounded"
                        />
                      </td> */}
                      <td className="py-2 px-4 border">
                        <select
                          value={item.taxId || item.gstTaxRate} // Ensure correct selection
                          onChange={(e) =>
                            handleTaxChange(item.id, Number(e.target.value))
                          }
                          className="px-4 py-2 cursor-pointer bg-gray-200 dark:bg-gray-700"
                        >
                          {/* Show default GST tax rate only if tax has not been changed */}
                          if(item.tax=="None"||"Exempted"||"GST @ 0%")
                          {<option value={item.tax}>{item.tax}%</option>}else
                          {!item.taxId ? (
                            <option value={item.gstTaxRate || 0}>
                              {taxRates.find(
                                (tax) => tax.id === item.gstTaxRate,
                              )?.rate || 'Select Tax'}
                              %
                            </option>
                          ) : (
                            /* Show currently selected tax after user selects a value */
                            <option value={item.taxId || 0}>
                              {taxRates.find((tax) => tax.id === item.taxId)
                                ?.rate || 'Select Tax'}
                              %
                            </option>
                          )}
                          {/* Show backend tax rates */}
                          {taxRates.map((tax) => (
                            <option key={tax.id} value={tax.id}>
                              {tax.description}
                            </option>
                          ))}
                        </select>
                      </td>

                      <td className="py-2 px-4 border">
                        ₹{Number(item.amount || 0).toFixed(2)}
                      </td>
                      {/* Delete Icon */}
                      <td className="py-2 px-4 border">
                        <button
                          onClick={() => handleDeleteItem(item.id)}
                          className="text-red-500 hover:text-red-700"
                        >
                          <Trash2 size={20} />
                        </button>
                      </td>
                    </tr>
                  ))
                ) : (
                  <tr>
                    <td colSpan={6} className="text-center py-4">
                      No items found
                    </td>
                  </tr>
                )}

                {/* Full-Width "+ Add Item" Row */}
                <tr>
                  <td
                    colSpan="9"
                    onClick={handleAddItemClick}
                    className="py-4 w-full text-center bg-gray-100 dark:bg-gray-700 dark:text-blue font-semibold text-blue-500 cursor-pointer hover:text-blue-700"
                  >
                    + Add Item
                  </td>
                </tr>
                {/* Dropdown for Item Selection */}
                {showDropdown && (
                  <tr>
                    <td
                      colSpan={7}
                      className="p-2 bg-white shadow-md border dark:bg-gray-700 dark:text-white"
                    >
                      <ul className="max-h-40 overflow-y-auto border rounded-md dark:bg-gray-700 dark:text-white">
                        {/* Header Row (Labels) */}
                        <li className="p-2 font-bold bg-gray-100 flex justify-between border-b dark:bg-gray-700 dark:text-white">
                          <span className="w-1/4">Item Name</span>
                          <span className="w-1/4">Sales Price</span>
                          <span className="w-1/4">Purchase Price</span>
                        </li>

                        {/* Items List */}
                        {items.length > 0 ? (
                          items.map((item: any, index) => (
                            <li
                              key={index}
                              className="p-2 flex justify-between items-center hover:bg-blue-100 cursor-pointer"
                              onClick={() => handleSelectItem(item)}
                            >
                              <span className="w-1/4">
                                {item.itemName || item.serviceName}
                              </span>
                              <span className="w-1/4">
                                ₹
                                {item.salesPrice_with_tax ||
                                  item.salesPrice ||
                                  '-'}
                              </span>
                              <span className="w-1/4">
                                ₹
                                {item.purchasePrice_with_tax ||
                                  item.purchasePrice ||
                                  '-'}
                              </span>
                            </li>
                          ))
                        ) : (
                          <li className="p-2 text-gray-500">
                            Loading items...
                          </li>
                        )}
                      </ul>
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>

          <div className="flex justify-between items-start mt-4">
            <div className="w-1/2 mr-2">
              <button
                className="text-blue-400 mb-2"
                onClick={() => setShowNotesInput(!showNotesInput)}
              >
                + Add Notes
              </button>
              {/* Show input field when showNotesInput is true */}
              {showNotesInput && (
                <textarea
                  value={notes}
                  onChange={(e) => setNotes(e.target.value)}
                  className="w-full p-2 border border-gray-700 dark:bg-gray-900 dark:text-whiterounded mt-2"
                  placeholder="Enter your notes here..."
                />
              )}

              <div className="bg-gray-100 dark:bg-gray-800 p-4 rounded">
                <h3 className="text-gray-700 font-bold mb-2">
                  Terms and Conditions
                </h3>
                <p className="text-gray-600">
                  1. Goods once sold will not be taken back or exchanged
                </p>
                <p className="text-gray-600">
                  2. All disputes are subject to [ENTER_YOUR_CITY_NAME]
                  jurisdiction only
                </p>
              </div>
              <button className="text-blue-400 mt-4">+ Add New Account</button>
            </div>
            <div className="w-1/2">
              <div className="bg-gray-100 p-4 rounded dark:bg-gray-900 dark:text-white">
                {/* ✅ Taxable Amount */}
                <div className="flex justify-between items-center mb-2">
                  <span className="text-gray-700">Taxable Amount</span>
                  <span className="text-gray-700">
                    ₹{invoiceData.taxable_amount}
                  </span>
                </div>

                {/* ✅ SGST & CGST */}
                {(() => {
                  const taxSummary = {};

                  invoiceData.invoice_items.forEach((item) => {
                    const taxKey = `${item.cgst}_${item.sgst}_${item.cess_rate}`; // ✅ Unique key for grouping

                    if (taxKey in taxSummary) {
                      taxSummary[taxKey].cgst_amount += parseFloat(
                        item.cgst_amount,
                      );
                      taxSummary[taxKey].sgst_amount += parseFloat(
                        item.sgst_amount,
                      );
                      taxSummary[taxKey].cess_amount += parseFloat(
                        item.cess_rate_amount,
                      );
                    } else {
                      taxSummary[taxKey] = {
                        cgst_rate: item.cgst,
                        cgst_amount: parseFloat(item.cgst_amount),
                        sgst_rate: item.sgst,
                        sgst_amount: parseFloat(item.sgst_amount),
                        cess_rate: item.cess_rate,
                        cess_amount: parseFloat(item.cess_rate_amount),
                      };
                    }
                  });

                  return Object.values(taxSummary).map((tax, index) => (
                    <div key={index} className="flex flex-col gap-1 mb-2">
                      <div className="flex justify-between items-center text-sm">
                        <span className="text-gray-700">
                          SGST @{tax.sgst_rate}%:
                        </span>
                        <span className="text-gray-700">
                          ₹{tax.sgst_amount.toFixed(2)}
                        </span>
                      </div>
                      <div className="flex justify-between items-center text-sm">
                        <span className="text-gray-700">
                          CGST @{tax.cgst_rate}%:
                        </span>
                        <span className="text-gray-700">
                          ₹{tax.cgst_amount.toFixed(2)}
                        </span>
                      </div>
                      {tax.cess_rate > 0 && (
                        <div className="flex justify-between items-center text-sm">
                          <span className="text-gray-700">
                            CESS @{tax.cess_rate}%:
                          </span>
                          <span className="text-gray-700">
                            ₹{tax.cess_amount.toFixed(2)}
                          </span>
                        </div>
                      )}
                    </div>
                  ));
                })()}

                {/* ✅ Discount Section */}
                <div className="flex justify-between items-center mb-2">
                  <button
                    className="text-blue-400 mb-2"
                    onClick={() => {
                      if (showDiscountInput) setDiscount(0); // ✅ Reset discount when removing
                      setShowDiscountInput(!showDiscountInput);
                    }}
                  >
                    {showDiscountInput ? '- Remove Discount' : '+ Add Discount'}
                  </button>

                  {showDiscountInput && (
                    <div className="flex items-center space-x-2 mt-2">
                      <input
                        type="number"
                        value={discount}
                        onChange={(e) => setDiscount(e.target.value)}
                        className="border border-gray-700 dark:bg-gray-900 dark:text-white p-2 rounded w-16 text-center"
                        placeholder="%"
                      />
                      <span className="text-gray-700">%</span>
                    </div>
                  )}
                </div>

                <div className="border-b border-gray-400 py-0.5 dark:border-gray-500 mb-2"></div>

                {/* ✅ Total Amount */}
                <div className="flex justify-between items-center mb-2">
                  <span className="text-gray-700 font-bold">Total Amount</span>
                  <span className="text-gray-700">
                    ₹
                    {(
                      invoiceData.total_amount -
                      (invoiceData.total_amount * (discount || 0)) / 100
                    ).toFixed(2)}
                  </span>
                </div>

                <div className="border-b border-gray-400 py-0.5 dark:border-gray-500 mb-2"></div>

                {/* ✅ Amount Received */}
                <div className="flex justify-between items-center">
                  <span className="text-gray-700">Amount Received</span>
                  <div className="flex items-center space-x-2">
                    <div className="flex items-center space-x-2">
                      <span className="text-gray-700 font-bold">₹</span>
                      <input
                        type="number"
                        value={invoiceData.amount_received}
                        onChange={handleChange}
                        className="border border-gray-700 dark:bg-gray-900 dark:text-white p-2 rounded w-24 text-right font-bold"
                        placeholder="0"
                        disabled={invoiceData.is_fully_paid}
                      />
                    </div>
                    {/* Payment Mode Dropdown */}
                    <select
                      className="border border-gray-300 p-2 rounded dark:bg-gray-900 dark:text-white"
                      value={invoiceData.payment_method}
                      onChange={(e) => setSelectedPaymentMode(e.target.value)}
                    >
                      <option value="Cash">Cash</option>
                      <option value="Card">Card</option>
                      <option value="Bank Transfer">Bank Transfer</option>
                      <option value="Netbanking">Netbanking</option>
                      <option value="Upi">UPI</option>
                      <option value="Cheque">Cheque</option>
                    </select>
                  </div>
                </div>

                {/* ✅ Fully Paid Checkbox */}
                <div className="flex items-center space-x-2">
                  <input
                    type="checkbox"
                    id="fullyPaid"
                    checked={invoiceData.is_fully_paid}
                    onChange={handleCheckboxChange}
                    className="cursor-pointer"
                  />
                  <label
                    htmlFor="fullyPaid"
                    className="text-gray-700 cursor-pointer"
                  >
                    Mark as Fully Paid
                  </label>
                </div>

                <div className="border-b border-gray-400 py-0.5 dark:border-gray-500 mb-4 mt-2"></div>

                {/* ✅ Balance Amount */}
                <div className="flex justify-between items-center">
                  <span className="text-green-500">Balance Amount</span>
                  <span className="text-green-500">
                    ₹{invoiceData.balance_amount}
                  </span>
                </div>

                <div className="border-b border-gray-400 py-0.5 dark:border-gray-500 mb-4 mt-4"></div>
              </div>{' '}
              {/* ✅ Background Container Ends Here */}
              <div className="flex justify-end items-center mt-4">
                <div className="text-right">
                  <p className="text-gray-700">
                    Authorized signatory for{' '}
                    <span className="font-bold">Business Name</span>
                  </p>
                  <div className="border-2 border border-blue-400 p-4 text-center text-blue-400 cursor-pointer mt-2">
                    <UplaodSignature setSignatureUrl={setSignatureUrl} />
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div className="flex justify-start gap-4">
            <button
              type="button"
              onClick={handleBack}
              className="rounded border border-blue-400 px-4 py-2 text-white bg-blue-500 dark:border-gray-600 dark:text-white dark:hover:bg-gray-700"
            >
              Back
            </button>
            <button
              onClick={handleSubmit}
              className={`bg-blue-500 text-white px-4 py-2 rounded flex items-center justify-center ${
                isSaving ? 'opacity-50 cursor-not-allowed' : ''
              }`}
              disabled={isSaving}
            >
              {isSaving ? 'Saving...' : 'Save Invoice'}
            </button>
          </div>
        </div>
      </div>
    </>
  );
};

export default EditInvoiceForm;

const handleSaveInvoice = async () => {
    if (!selectedParty) {
      alert("Please select a party before saving the invoice!");
      return;
    }
  
    setIsSaving(true);
  
    const formattedItems = selectedItems.map((item) => ({
      service: item.type === "service" ? item.id : null,
      item: item.type === "item" ? item.id : null,
      gstTaxRate: item.taxId,
      quantity: item.quantity,
    }));
  
    const invoiceData = {
      invoice_no: salesInvoiceNo,
      date: invoiceDate,
      payment_term: paymentTerms,
      // invoice_items: formattedItems,
      discount,
      amount_received: amountReceived,
      payment_method: selectedPaymentMode,
      is_fully_paid: isFullyPaid,
      notes,
      party: selectedParty.id,
    };
  
    const formData = new FormData();
    
    // Append regular invoice data to the FormData
    for (const [key, value] of Object.entries(invoiceData)) {
      formData.append(key, value);
    }

    formData.append("invoice_items", JSON.stringify(formattedItems));
  
    // ✅ Append signature file (if exists)
    if (signatureFile) {
      formData.append("signature", signatureFile);
    } else {
      console.warn("⚠️ No signature file uploaded.");
    }
  
    // ✅ Append signature URL (if exists)
    if (signatureUrl) {
      formData.append("signatureUrl", signatureUrl);
    } else {
      console.warn("⚠️ No signature URL available.");
    }
  
    try {
      const token = localStorage.getItem("accessToken");
      if (!token) throw new Error("Token not found");
  
      const response = await fetch(`${API_URL}/sales/invoices/`, {
        method: "POST",
        headers: {
          Authorization: `Bearer ${token}`,
        },
        body: formData, // ✅ Send as FormData
      });
  
      if (response.ok) {
        const result = await response.json();
        alert("Invoice Saved Successfully!");
        console.log(result);
        const newInvoiceNo = salesInvoiceNo + 1;
        setSalesInvoiceNo(newInvoiceNo);
        localStorage.setItem('salesInvoiceNo', newInvoiceNo.toString());
       
      } else {
        alert("Failed to save invoice");
      }
    } catch (error) {
      console.error("Error saving invoice:", error);
      alert("Something went wrong!");
    } finally {
      setIsSaving(false);
    }
  };
  
